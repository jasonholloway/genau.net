//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace System {
    using Genau;
    using System.Collections.Generic;
    using System.Linq;
    
    
    public static class EagerEnumerable {
        
        public static IEagerEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(this IEagerEnumerable<TSource> source, Func<TSource, Int32, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)
        
        
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.SelectMany<TSource, TCollection, TResult>(source, collectionSelector, resultSelector));
        }
        
        public static IEagerEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(this IEagerEnumerable<TSource> source, Func<TSource, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)
        
        
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.SelectMany<TSource, TCollection, TResult>(source, collectionSelector, resultSelector));
        }
        
        public static IEagerEnumerable<TSource> Skip<TSource>(this IEagerEnumerable<TSource> source, Int32 count)
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.Skip<TSource>(source, count));
        }
        
        public static IEagerEnumerable<TSource> SkipWhile<TSource>(this IEagerEnumerable<TSource> source, Func<TSource, Boolean> predicate)
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.SkipWhile<TSource>(source, predicate));
        }
        
        public static IEagerEnumerable<TSource> SkipWhile<TSource>(this IEagerEnumerable<TSource> source, Func<TSource, Int32, Boolean> predicate)
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.SkipWhile<TSource>(source, predicate));
        }
        
        public static IEagerEnumerable<TSource> Take<TSource>(this IEagerEnumerable<TSource> source, Int32 count)
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.Take<TSource>(source, count));
        }
        
        public static IEagerEnumerable<TSource> TakeWhile<TSource>(this IEagerEnumerable<TSource> source, Func<TSource, Boolean> predicate)
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.TakeWhile<TSource>(source, predicate));
        }
        
        public static IEagerEnumerable<TSource> TakeWhile<TSource>(this IEagerEnumerable<TSource> source, Func<TSource, Int32, Boolean> predicate)
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.TakeWhile<TSource>(source, predicate));
        }
        
        public static IEagerEnumerable<TSource> Union<TSource>(this IEagerEnumerable<TSource> first, IEnumerable<TSource> second)
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.Union<TSource>(first, second));
        }
        
        public static IEagerEnumerable<TSource> Union<TSource>(this IEagerEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.Union<TSource>(first, second, comparer));
        }
        
        public static IEagerEnumerable<TSource> Where<TSource>(this IEagerEnumerable<TSource> source, Func<TSource, Boolean> predicate)
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.Where<TSource>(source, predicate));
        }
        
        public static IEagerEnumerable<TSource> Where<TSource>(this IEagerEnumerable<TSource> source, Func<TSource, Int32, Boolean> predicate)
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.Where<TSource>(source, predicate));
        }
        
        public static IEagerEnumerable<TResult> Zip<TFirst, TSecond, TResult>(this IEagerEnumerable<TFirst> first, IEnumerable<TSecond> second, Func<TFirst, TSecond, TResult> resultSelector)
        
        
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.Zip<TFirst, TSecond, TResult>(first, second, resultSelector));
        }
        
        public static IEagerEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>(this IEagerEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector)
        
        
        
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.Join<TOuter, TInner, TKey, TResult>(outer, inner, outerKeySelector, innerKeySelector, resultSelector));
        }
        
        public static IEagerEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>(this IEagerEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, IEqualityComparer<TKey> comparer)
        
        
        
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.Join<TOuter, TInner, TKey, TResult>(outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer));
        }
        
        public static IEagerEnumerable<TSource> Reverse<TSource>(this IEagerEnumerable<TSource> source)
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.Reverse<TSource>(source));
        }
        
        public static IEagerEnumerable<TResult> Select<TSource, TResult>(this IEagerEnumerable<TSource> source, Func<TSource, TResult> selector)
        
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.Select<TSource, TResult>(source, selector));
        }
        
        public static IEagerEnumerable<TResult> Select<TSource, TResult>(this IEagerEnumerable<TSource> source, Func<TSource, Int32, TResult> selector)
        
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.Select<TSource, TResult>(source, selector));
        }
        
        public static IEagerEnumerable<TResult> SelectMany<TSource, TResult>(this IEagerEnumerable<TSource> source, Func<TSource, IEnumerable<TResult>> selector)
        
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.SelectMany<TSource, TResult>(source, selector));
        }
        
        public static IEagerEnumerable<TResult> SelectMany<TSource, TResult>(this IEagerEnumerable<TSource> source, Func<TSource, Int32, IEnumerable<TResult>> selector)
        
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.SelectMany<TSource, TResult>(source, selector));
        }
        
        public static IEagerEnumerable<TSource> Append<TSource>(this IEagerEnumerable<TSource> source, TSource element)
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.Append<TSource>(source, element));
        }
        
        public static IEagerEnumerable<TSource> Prepend<TSource>(this IEagerEnumerable<TSource> source, TSource element)
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.Prepend<TSource>(source, element));
        }
        
        public static IEagerEnumerable<TSource> Concat<TSource>(this IEagerEnumerable<TSource> first, IEnumerable<TSource> second)
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.Concat<TSource>(first, second));
        }
        
        public static IEagerEnumerable<TSource> DefaultIfEmpty<TSource>(this IEagerEnumerable<TSource> source)
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.DefaultIfEmpty<TSource>(source));
        }
        
        public static IEagerEnumerable<TSource> DefaultIfEmpty<TSource>(this IEagerEnumerable<TSource> source, TSource defaultValue)
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.DefaultIfEmpty<TSource>(source, defaultValue));
        }
        
        public static IEagerEnumerable<TSource> Distinct<TSource>(this IEagerEnumerable<TSource> source)
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.Distinct<TSource>(source));
        }
        
        public static IEagerEnumerable<TSource> Distinct<TSource>(this IEagerEnumerable<TSource> source, IEqualityComparer<TSource> comparer)
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.Distinct<TSource>(source, comparer));
        }
        
        public static IEagerEnumerable<TSource> AsEnumerable<TSource>(this IEagerEnumerable<TSource> source)
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.AsEnumerable<TSource>(source));
        }
        
        public static IEagerEnumerable<TSource> Except<TSource>(this IEagerEnumerable<TSource> first, IEnumerable<TSource> second)
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.Except<TSource>(first, second));
        }
        
        public static IEagerEnumerable<TSource> Except<TSource>(this IEagerEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.Except<TSource>(first, second, comparer));
        }
        
        public static IEagerEnumerable<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this IEagerEnumerable<TSource> source, Func<TSource, TKey> keySelector)
        
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.GroupBy<TSource, TKey>(source, keySelector));
        }
        
        public static IEagerEnumerable<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this IEagerEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)
        
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.GroupBy<TSource, TKey>(source, keySelector, comparer));
        }
        
        public static IEagerEnumerable<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this IEagerEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)
        
        
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.GroupBy<TSource, TKey, TElement>(source, keySelector, elementSelector));
        }
        
        public static IEagerEnumerable<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this IEagerEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)
        
        
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.GroupBy<TSource, TKey, TElement>(source, keySelector, elementSelector, comparer));
        }
        
        public static IEagerEnumerable<TResult> GroupBy<TSource, TKey, TResult>(this IEagerEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector)
        
        
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.GroupBy<TSource, TKey, TResult>(source, keySelector, resultSelector));
        }
        
        public static IEagerEnumerable<TResult> GroupBy<TSource, TKey, TElement, TResult>(this IEagerEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector)
        
        
        
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.GroupBy<TSource, TKey, TElement, TResult>(source, keySelector, elementSelector, resultSelector));
        }
        
        public static IEagerEnumerable<TResult> GroupBy<TSource, TKey, TResult>(this IEagerEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector, IEqualityComparer<TKey> comparer)
        
        
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.GroupBy<TSource, TKey, TResult>(source, keySelector, resultSelector, comparer));
        }
        
        public static IEagerEnumerable<TResult> GroupBy<TSource, TKey, TElement, TResult>(this IEagerEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector, IEqualityComparer<TKey> comparer)
        
        
        
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.GroupBy<TSource, TKey, TElement, TResult>(source, keySelector, elementSelector, resultSelector, comparer));
        }
        
        public static IEagerEnumerable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this IEagerEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector)
        
        
        
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.GroupJoin<TOuter, TInner, TKey, TResult>(outer, inner, outerKeySelector, innerKeySelector, resultSelector));
        }
        
        public static IEagerEnumerable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this IEagerEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector, IEqualityComparer<TKey> comparer)
        
        
        
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.GroupJoin<TOuter, TInner, TKey, TResult>(outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer));
        }
        
        public static IEagerEnumerable<TSource> Intersect<TSource>(this IEagerEnumerable<TSource> first, IEnumerable<TSource> second)
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.Intersect<TSource>(first, second));
        }
        
        public static IEagerEnumerable<TSource> Intersect<TSource>(this IEagerEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)
         {
            return Genau.EagerEnumerable.From(System.Linq.Enumerable.Intersect<TSource>(first, second, comparer));
        }
    }
}
